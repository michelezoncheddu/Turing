package turing.server;

import turing.ServerNotificationManagerAPI;
import turing.UserManagerAPI;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.rmi.AlreadyBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.util.Comparator;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import static java.lang.System.out;

/**
 * Implements the turing server
 */
public class Server implements Runnable {
	static final String DOCS_ROOT = "data"; // documents folder

	static int DEFAULT_PORT   = 1100;   // server socket port
	static int CHAT_PORT      = 1101;   // multicast port
	static int RMI_PORT       = 1099;   // Java RMI port
	static int MTU            = 1500;   // Ethernet MTU

	static int MAX_SECTIONS   = 1024;   // max number of sections for a document

	static int TIMEOUT_MILLIS = 1000;   // handler thread timeout

	// Java RMI objects name
	static String REGISTRATION_OBJECT = "reg";
	static String NOTIFICATION_OBJECT = "not";

	// global managers
	static final UserManager     userManager     = new UserManager();
	static final DocumentManager documentManager = new DocumentManager();
	static final AddressManager  addressManager  = new AddressManager();

	/**
	 * Creates a new server
	 */
	public Server() {
		super();
	}

	/**
	 * Starts the server
	 */
	@Override
	public void run() {
		ServerNotificationManager notificationManager = new ServerNotificationManager();

		// exporting managers
		try {
			exportObjects(userManager, notificationManager);
		} catch (RemoteException | AlreadyBoundException e) {
			System.err.println("Error exporting objects: " + e.getMessage());
			return; // terminate server
		}

		ServerSocket serverSocket;
		Socket clientConnection;
		try {
			serverSocket = new ServerSocket(DEFAULT_PORT);
		} catch (IOException e) {
			System.err.println("Cannot create socket: " + e.getMessage()); // cannot create socket
			return;
		}

		// initialize the thread pool
		ThreadPoolExecutor threadPool = (ThreadPoolExecutor) Executors.newCachedThreadPool();

		// termination function (intercepts SIGINT generated by ctrl-c)
		Runtime.getRuntime().addShutdownHook(new Thread(() -> {
			// close socket
			try {
				serverSocket.close();
			} catch (IOException e) {
				System.err.println("Error closing socket: " + e.getMessage());
			}

			// terminate thread pool
			out.println("Waiting threads termination...");
			threadPool.shutdown();
			ClientHandler.stopAllHandlers();
			try {
				if (threadPool.awaitTermination(TIMEOUT_MILLIS / 1000 * 2, TimeUnit.SECONDS))
					out.println("Threads terminated correctly");
				else {
					out.println("Forcing termination...");
					threadPool.shutdownNow();
				}
			} catch (InterruptedException e) {
				System.err.println("Waiting interrupted: " + e.getMessage());
			}

			// deleting files
			out.println("Deleting files...");
			Path rootPath = Paths.get(DOCS_ROOT);
			try {
				Files.walk(rootPath)
						.sorted(Comparator.reverseOrder())
						.map(Path::toFile)
						.forEach(File::delete);
			} catch (IOException e) {
				out.println("No files to delete");
			}
			out.println("Server stopped");
		}));

		out.println("Server ready, waiting for connections...\nPress ctrl-C to terminate");

		// waiting for connections loop
		while (true) {
			try {
				clientConnection = serverSocket.accept();
			} catch (IOException e) {
				if (serverSocket.isClosed()) // terminate server
					break;
				throw new RuntimeException("Error accepting client connection", e);
			}
			threadPool.execute(new ClientHandler(clientConnection));
		}
	}

	/**
	 * Loads the configuration file
	 *
	 * @param fileName the configuration file name
	 */
	private static void loadConfiguration(String fileName) {
		out.println("Loading configuration file: " + fileName);
		Properties prop = new Properties();
		InputStream is;
		try {
			is = new FileInputStream(fileName);
			prop.load(is);
		} catch (NullPointerException | IOException e) {
			System.err.println("Cannot find configuration file: " + e.getMessage());
			System.out.println("Loading default configuration");
			return;
		}

		try {
			DEFAULT_PORT   = Integer.parseInt(prop.getProperty("DEFAULT_PORT"));
			CHAT_PORT      = Integer.parseInt(prop.getProperty("CHAT_PORT"));
			RMI_PORT       = Integer.parseInt(prop.getProperty("RMI_PORT"));
			MTU            = Integer.parseInt(prop.getProperty("MTU"));
			MAX_SECTIONS   = Integer.parseInt(prop.getProperty("MAX_SECTIONS"));
			TIMEOUT_MILLIS = Integer.parseInt(prop.getProperty("TIMEOUT_MILLIS"));
		} catch (NumberFormatException e) {
			System.err.println("Bad configuration file format: " + e.getMessage());
		}

		REGISTRATION_OBJECT = prop.getProperty("REGISTRATION_OBJECT", REGISTRATION_OBJECT);
		NOTIFICATION_OBJECT = prop.getProperty("NOTIFICATION_OBJECT", NOTIFICATION_OBJECT);
	}

	/**
	 * Exports the remote objects
	 *
	 * @param userManager         the user manager to export
	 * @param notificationManager the notification manager to export
	 *
	 * @throws RemoteException       if a RMI communication error occurs
	 * @throws AlreadyBoundException if an object was already bound
	 */
	private void exportObjects(UserManagerAPI userManager, ServerNotificationManagerAPI notificationManager)
			throws RemoteException, AlreadyBoundException {
		// exporting objects
		UserManagerAPI userManagerStub =
				(UserManagerAPI) UnicastRemoteObject.exportObject(userManager, RMI_PORT);
		ServerNotificationManagerAPI notificationStub =
				(ServerNotificationManagerAPI) UnicastRemoteObject.exportObject(notificationManager, RMI_PORT);

		Registry registry = LocateRegistry.createRegistry(RMI_PORT);

		// publishing the stubs into the registry
		registry.bind(REGISTRATION_OBJECT, userManagerStub);
		registry.bind(NOTIFICATION_OBJECT, notificationStub);
	}

	/**
	 * Main function
	 *
	 * @param args the server arguments
	 */
	public static void main(String[] args) {
		if (args.length > 0)
			loadConfiguration(args[0]);
		new Thread(new Server()).start();
	}
}
